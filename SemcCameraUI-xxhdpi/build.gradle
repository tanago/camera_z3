// DexPatcher Patched Application plugin:

apply plugin: 'com.github.lanchon.dexpatcher.patched-application'

// The DexPatcher Patched Application plugin produces a modified Android application
// by applying changes and additions to code and resources of a source application
// imported as a DexPatcher APK library.

// General Plugin Configuration
dexpatcherConfig {
    // This should point to a local clone of the DexPatcher Gradle plugin support tool
    // repo that is available here: https://github.com/Lanchon/DexPatcher-gradle-tools
    // But instead of defining the directory here, add a 'dexpatcher.dir' entry to the
    // 'local.properties' of the root project. That way it becomes available to all
    // subprojects and the local configuration is not posted to the VCS.
    //dir = '~/android/dexpatcher/dexpatcher-gradle-tools'

    // Specific Plugin Configuration
    patchedApplication {
        // Set to false to bypass DexPatcher and only patch resources.
        //patchCode = false
    }

    // Per-Tool Defaults
    dexpatcher {
        // This should be set if patching code for api level less than 14.
        //apiLevel = 14

        // Set to QUIET, NORMAL, VERBOSE or DEBUG. Default is NORMAL, VERBOSE is recommended.
        verbosity = VERBOSE
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'

    defaultConfig {
        // The 'package' attribute in the patched app manifest must be different from the
        // source app ID to support class generation (R and BuildConfig), but here you can
        // override the exported patched app ID to match the source.
        applicationId 'com.sonyericsson.android.camera'

        // You must set these fields to match or be compatible with the corresponding source
        // fields. It is recommended to increase 'minSdkVersion' to at least 14 if necessary.
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName '1.0.B.1.10'
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    // To produce a patched application we need to import an apk library created from the
    // app we want to modify. In this case we import the artifact produced by the 'source'
    // subproject. But the library could be produced by an independent project and imported
    // manually in Android Studio just like any other android library (aar) file.
    compile project(':source')
    // We import an Android library, a file chooser, just for fun. This pulls in all its
    // resources that will be transparently merged, like other resources from this project,
    // with those of the source app. Each component will have its own independent 'R' class.
    // The numeric IDs of the resources coming from the source app will be kept constant.
    //compile('ru.bartwell:exfilepicker:1.8') {
    // But the imported library has a transitive dependency on a module that is already
    // present in the source app. So we exclude it from the import, keeping the source
    // app's version. Alternatively we could delete the copy brought in by the source
    // app using DexPatcher package annotations.
    //    exclude module: 'support-v4'
    //}
}
